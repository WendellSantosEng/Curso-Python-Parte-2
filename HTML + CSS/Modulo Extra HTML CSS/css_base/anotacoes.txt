
    FONTE : CHATGPT

    Seletores de Tipo:

        elemento - seleciona todos os elementos do tipo especificado.

    Seletores de ID:

        #id - seleciona o elemento com o ID especificado.

    Seletores de Classe:

        .classe - seleciona todos os elementos com a classe especificada.

    Seletores Universais:

        * - seleciona todos os elementos.

    Seletores de Atributo:

        [atributo] - seleciona elementos com o atributo especificado.
        [atributo=valor] - seleciona elementos com o atributo especificado e o valor correspondente.
        [atributo^=valor] - seleciona elementos com o atributo especificado e que começa com o valor especificado.
        [atributo$=valor] - seleciona elementos com o atributo especificado e que termina com o valor especificado.
        [atributo*=valor] - seleciona elementos com o atributo especificado e que contém o valor especificado.

    Seletores de Descendência:

        elemento pai elemento filho - seleciona elementos filhos que são descendentes diretos do elemento pai.

    Seletores de Filho Direto:

        elemento > elemento filho - seleciona elementos filhos que são filhos diretos do elemento pai.
    
    Seletores de Irmão Adjacente:

        elemento + elemento irmão - seleciona o elemento irmão adjacente do elemento especificado.
    
    Seletores de Irmãos Gerais:

        elemento ~ elemento irmão - seleciona todos os elementos irmãos do elemento especificado.
    
    Pseudo-classes:

        :hover - seleciona um elemento quando o mouse está sobre ele.
        :focus - seleciona um elemento quando ele está em foco.
        :active - seleciona um elemento durante o clique.

    Pseudo-elementos:

        ::before - insere conteúdo antes do conteúdo do elemento.
        ::after - insere conteúdo após o conteúdo do elemento.
        ::first-line - seleciona a primeira linha dentro do elemento.
        ::first-letter - seleciona a primeira letra dentro do elemento.

    Essa é apenas uma lista básica. Há muitos outros seletores e combinações possíveis.
    Além disso, seletores podem ser combinados para criar regras mais específicas e 
    direcionadas.

----------------------------------------------------------------------------------------------------------------------------------

    A pseudo-classe :nth-child pode ser útil em diversas situações para estilizar elementos específicos
    com base em sua posição relativa. Aqui estão algumas situações comuns onde você pode usar :nth-child:

        - Estilizar linhas alternadas em tabelas:

            tr:nth-child(even) {
                background-color: #f2f2f2;
            }

        - Estilizar itens de uma lista:

            ul li:nth-child(odd) {
                color: red;
            }
            
        - Estilizar elementos em colunas específicas:

            table td:nth-child(3n+1) {
                font-weight: bold;
            }

        - Estilizar elementos em blocos diferentes:

            .container > div:nth-child(2n) {
                border: 1px solid #ccc;
            }

        - Estilizar itens de uma galeria de imagens:

            .gallery img:nth-child(4n+3) {
                border: 2px solid #ff9900;
            }

        - Estilizar itens em uma grade:

            .grid-item:nth-child(odd) {
                background-color: lightgreen;
            }

        - Estilizar cabeçalhos de tabela:

            table th:nth-child(even) {
                background-color: #ddd;
            }

        - Estilizar elementos de uma lista com diferentes estilos a cada 3 itens:

            ul li:nth-child(3n+1) {
                color: blue;
            }

            ul li:nth-child(3n+2) {
                color: green;
            }

            ul li:nth-child(3n) {
                color: red;
            }

    Estas são apenas algumas ideias, e a aplicação do :nth-child pode variar dependendo da estrutura
    específica do seu HTML e das necessidades de design do seu projeto.

    Experimente e adapte conforme necessário para atender aos seus requisitos específicos.


----------------------------------------------------------------------------------------------------------------------------------


    Em CSS, pseudo-elements são usados para selecionar e estilizar partes específicas de um elemento. Eles são representados por dois pontos (::) e são adicionados ao seletor para escolher uma parte específica do elemento. Aqui está uma lista de alguns pseudo-elementos comuns em CSS:

        ::before: Adiciona conteúdo antes do conteúdo real do elemento.

            .element::before {
                content: "Antes ";
            }

        ::after: Adiciona conteúdo após o conteúdo real do elemento.

            .element::after {
                content: " Depois";
            }

        ::first-line: Seleciona a primeira linha de um bloco.

            .element::first-line {
                color: red;
            }

        ::first-letter: Seleciona a primeira letra de um bloco de texto.

            .element::first-letter {
                font-size: 2em;
            }

        ::selection: Aplica estilos à parte do texto que está sendo selecionada pelo usuário.

            ::selection {
                background-color: yellow;
                color: black;
            }

        ::placeholder: Estiliza o texto do espaço reservado em campos de formulário.

            input::placeholder {
                color: gray;
            }

        ::before e ::after são comumente usados para criar pseudo-elementos efeitos decorativos.


----------------------------------------------------------------------------------------------------------------------------------

Propriedades CSS para Flexbox:

    display: Define um contêiner como um flexível.
    flex-direction: Define a direção principal do flexível.
    flex-wrap: Especifica se os itens devem envolver-se em várias linhas ou não.
    flex-flow: Uma abreviação de flex-direction e flex-wrap.
    justify-content: Alinha os itens ao longo do eixo principal.
    align-items: Alinha os itens ao longo do eixo secundário.
    align-content: Alinha o contêiner de flexíveis quando os itens não ocupam todo o espaço disponível.
    flex: Define a capacidade de estiramento de um item.
    order: Define a ordem dos itens flexíveis.

Propriedades CSS para Grid:

    display: Define um contêiner como uma grade.
    grid-template-columns: Especifica o tamanho das colunas da grade.
    grid-template-rows: Especifica o tamanho das linhas da grade.
    grid-template-areas: Define o layout da grade usando nomes de área.
    grid-template: Uma abreviação de grid-template-rows, grid-template-columns, e grid-template-areas.
    grid-column-gap: Define o espaçamento entre as colunas da grade.
    grid-row-gap: Define o espaçamento entre as linhas da grade.
    grid-gap: Uma abreviação de grid-row-gap e grid-column-gap.
    justify-items: Alinha os itens dentro de um espaço de grade ao longo do eixo de linha.
    align-items: Alinha os itens dentro de um espaço de grade ao longo do eixo do bloco.
    justify-self: Alinha um item dentro de uma célula da grade ao longo do eixo de linha.
    align-self: Alinha um item dentro de uma célula da grade ao longo do eixo do bloco.
    grid-auto-rows: Especifica o tamanho das linhas automáticas na grade.
    grid-auto-columns: Especifica o tamanho das colunas automáticas na grade.
    grid-auto-flow: Controla como os itens são automaticamente colocados na grade.